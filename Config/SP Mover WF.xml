[11:45 AM] Muhammed Abdul Gafur
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="SP Mover WF" type="IdentityLifecycle">
  <Variable input="true" name="trigger"/>
  <Variable input="true" name="event"/>
  <Variable initializer="string:true" name="trace"/>
  <Variable initializer="string:SPMover" name="flow"/>
  <Variable initializer="string:LCM" name="source"/>
  <Variable editable="true" initializer="false" name="optimisticProvisioning"/>
  <Variable editable="true" initializer="false" name="foregroundProvisioning"/>
  <Variable input="true" name="identityName"/>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName"/>
  <Variable name="plan"/>
  <Variable name="project"/>
  <Variable name="emailArgList"/>
  <Variable name="approvalSet"/>
  <Variable name="identityRequestId" output="true"/>
  <Description>GIB Mover worfkflow</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Common Rule Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Exit Rule Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Mover Rule Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="21" posY="27">
    <Script>
      <Source>
         import com.iam.IAMLogger;
         IAMLogger.info(IAMLogger.MOVER, String.format("******Starting Mover's Process for Identity: %s", identityName));
      </Source>
    </Script>
    <Transition to="Build Plan">
      <Script>
        <Source>
        import com.iam.IAMConstants;
        import com.iam.IAMLogger;
        import com.iam.IAMUtil;
        String movertype = IAMUtil.getMoverType(event.getOldObject(), event.getNewObject());
        if(IAMConstants.AREA_OR_BUSINESS_GROUP_CHANGED.equalsIgnoreCase(movertype)) {
        	IAMLogger.debug(IAMLogger.MOVER, "Transition to Exit Identity!");
          return false;
        }
        IAMLogger.debug(IAMLogger.MOVER,"Transition to BuildPlan!" );
        return true;
        </Source>
      </Script>
    </Transition>
    <Transition to="ExitIdentity"/>
  </Step>
  <Step icon="Task" name="ExitIdentity" posX="87" posY="121">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="isTermination" value="false"/>
    <Arg name="wfName" value="GIB Exit WF"/>
    <Arg name="identityTaskResultId"/>
    <Arg name="triggerSource" value="ref:triggerSource"/>
    <Arg name="wfCaseName" value="Transfer Exit"/>
    <Arg name="flow" value="string:GIBMoverExit"/>
    <Arg name="requestor" value="ref:launcher"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Return name="wfStatus" to="exitStatus"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="SP Workflow Launcher"/>
    </WorkflowRef>
    <Transition to="Build Plan"/>
  </Step>
  <Step action="script:return buildMoverPlan(context,workflow);" icon="Analysis" name="Build Plan" posX="191" posY="122" resultVariable="plan">
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="280" posY="35">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="policiesToCheck"/>
    <Arg name="workItemPriority"/>
    <Arg name="policyViolations"/>
    <Arg name="workItemComments"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="policyScheme"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="identityRequest"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="enableApprovalRecommendations"/>
    <Arg name="asyncCacheRefresh"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description> Call the standard subprocess to initialize the request, this includes auditing, building the approvalset, compiling the plan into project and checking policy violations. 
    </Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Auto Approve"/>
  </Step>
  <Step name="Auto Approve" posX="345" posY="122">
    <Script>
      <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          doAutoApprove(approvalSet);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);</Source>
    </Script>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Provision" name="Provision" posX="437" posY="34">
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="recompileBeforeProvisioning" value="!ref:foregroundProvisioning"/>
    <Arg name="disableIdentityRequests"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="provisioningMaxRetries"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="retryProject"/>
    <Arg name="splitProvisioning"/>
    <Arg name="provisioningRetryThreshold"/>
    <Description> Call the standard subprocess to initialize the request, this includes auditing, building the approvalset, compiling the plan into project and checking policy violations. 
    </Description>
    <Return name="retries" to="retries"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Provision with retries"/>
    </WorkflowRef>
    <Transition to="Post Provision"/>
  </Step>
  <Step action="script:return aggregateAndRefresh(context,workflow);" condition="ref:doRefresh" icon="Task" name="Refresh Identity" posX="608" posY="36">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="provision" value="false"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="synchronizeAttributes" value="false"/>
    <Transition to="Notify"/>
  </Step>
  <Step action="script:postProvision(context,workflow);" icon="Task" name="Post Provision" posX="515" posY="125">
    <Transition to="Refresh Identity"/>
  </Step>
  <Step icon="Task" name="Notify" posX="712" posY="36">
    <Arg name="identityDisplayName"/>
    <Arg name="emailTemplateExists"/>
    <Arg name="trace"/>
    <Arg name="identityName"/>
    <Arg name="emailArgs"/>
    <Arg name="emailIterator"/>
    <Arg name="emailArgList" value="ref:emailArgList"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="SP Dynamic Send Emails Sub"/>
    </WorkflowRef>
    <Transition to="LaunchCertification">
      <Script>
        <Source>
        import com.iam.IAMConstants;
        import com.iam.IAMLogger;
        import com.iam.IAMUtil;
        IAMLogger.debug(IAMLogger.MOVER, "Check the mover type");
        String movertype = IAMUtil.getMoverType(event.getOldObject(), event.getNewObject());
        if(IAMConstants.DEPARTMENT_OR_DESIGNATION_CHANGED.equalsIgnoreCase(movertype)) {
          IAMLogger.debug(IAMLogger.MOVER, "Transition to LaunchCertification");
          return true;
        }
        return false;
        </Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step name="LaunchCertification" posX="775" posY="137">
    <Script>
      <Source>
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.Iterator;
    import java.util.List;
    import com.iam.IAMLogger;
    import sailpoint.api.CertificationScheduler;
    import sailpoint.api.SailPointContext;
    import sailpoint.object.Certification;
    import sailpoint.object.CertificationDefinition;
    import sailpoint.object.CertificationEntity;
    import sailpoint.object.CertificationSchedule;
    import sailpoint.object.Filter;
    import sailpoint.object.Identity;
    import sailpoint.object.QueryOptions;
    import sailpoint.object.TaskSchedule;
    import sailpoint.tools.GeneralException;
    import sailpoint.tools.Util;
 
    public boolean launchMoverCert(SailPointContext context, String identityName, String launcher) throws GeneralException {
      boolean launched = false;
      IAMLogger.debug(IAMLogger.MOVER, "Begin setting up the identity info for the Mover Cert");
      Identity newIdentity = context.getObjectByName(Identity.class, identityName);
      IAMLogger.debug(IAMLogger.MOVER, "Building certification for " + identityName);
      Identity certifier = newIdentity.getManager();
      try {
        QueryOptions qo = new QueryOptions();
        String identityId = newIdentity.getId();
        qo.addFilter(Filter.eq("CertificationEntity.targetId", identityId));
        IAMLogger.debug(IAMLogger.MOVER, "Check for existing certs with query: " + qo);
        Iterator certs = context.search(CertificationEntity.class, qo);
        if (certs == null || !certs.hasNext()) {
          IAMLogger.debug(IAMLogger.MOVER, "Call launch cert");
          launchCertification(context, newIdentity, launcher, certifier);
          launched = true;
        } else {
          IAMLogger.debug(IAMLogger.MOVER, "Already existing cert for identity: " + identityName);
          Util.flushIterator(certs);
        }
      } catch (Exception e) {
        IAMLogger.debug(IAMLogger.MOVER, "Failure to launch cert: " + e.toString());
      }
      return launched;
    }
 
    public void launchCertification(SailPointContext context, Identity identity, String launcher, Identity certifier) throws Exception {
      IAMLogger.debug(IAMLogger.MOVER, "Enter launchCertification");
      String requestorName = launcher;
      String identityName = identity.getName();
      if (requestorName == null || requestorName.equalsIgnoreCase("Scheduler") || requestorName.equalsIgnoreCase("RequestHandler")) {
        requestorName = "spadmin";
      }
      Identity requestor = context.getObject(Identity.class, requestorName);
      IAMLogger.debug(IAMLogger.MOVER, "Change requested by " + requestor.getName());
      IAMLogger.debug(IAMLogger.MOVER, "Add identity to list");
      List identities = new ArrayList();
      identities.add(identity.getName());
 
      IAMLogger.debug(IAMLogger.MOVER, "Set the cert group owner");
      Identity certGroupOwner = context.getObjectByName(Identity.class, "SSGWorkGroup");
 
      IAMLogger.debug(IAMLogger.MOVER, "Create scheduler &amp; schedule set to run now");
      CertificationScheduler scheduler = new CertificationScheduler(context);
      CertificationSchedule schedule = scheduler.initializeScheduleBean(requestor, Certification.Type.Identity);
      schedule.setRunNow(true);
 
      IAMLogger.debug(IAMLogger.MOVER, "Configure cert def");
      CertificationDefinition definition = schedule.getDefinition();
      definition.setCertifierSelectionType(CertificationDefinition.CertifierSelectionType.Manual);
      definition.setProcessRevokesImmediately(true);
      String certName = "Mover Manager Certification for " + identityName + " - " + identity.getDisplayName();
      definition.setNameTemplate(certName + ": assigned to " + certifier.getDisplayName());
      definition.setShortNameTemplate(certName);
      definition.setName(certName + " [" + new Date().toString() + "]");
      definition.setIdentitiesToCertify(identities);
      definition.setCertifierName(certifier.getName());
      definition.setCertificationOwner(certGroupOwner);
      definition.setCertificationNameTemplate(certName);
      IAMLogger.debug(IAMLogger.MOVER, "Schedule task to run, passing in schedule (which has certficiaton defintion attached)");
      TaskSchedule taskSchedule = scheduler.saveSchedule(schedule, false);
      IAMLogger.debug(IAMLogger.MOVER, "Exit launchCertification");
    }
    launchMoverCert(context, identityName, launcher);
    </Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Finalize" posX="883" posY="136">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="autoVerifyIdentityRequest"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="workItemPriority"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="ticketDataGenerationRule"/>
    <Description> Call the standard subprocess that can audit/finalize the request. 
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="884" posY="32"/>
</Workflow>